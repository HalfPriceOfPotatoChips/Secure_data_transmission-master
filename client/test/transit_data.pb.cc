// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transit_data.proto

#include "transit_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Key {
PROTOBUF_CONSTEXPR RandomNumRequest::RandomNumRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.random_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RandomNumRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RandomNumRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RandomNumRequestDefaultTypeInternal() {}
  union {
    RandomNumRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RandomNumRequestDefaultTypeInternal _RandomNumRequest_default_instance_;
PROTOBUF_CONSTEXPR RandomKeyRespone::RandomKeyRespone(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.random_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RandomKeyResponeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RandomKeyResponeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RandomKeyResponeDefaultTypeInternal() {}
  union {
    RandomKeyRespone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RandomKeyResponeDefaultTypeInternal _RandomKeyRespone_default_instance_;
PROTOBUF_CONSTEXPR PremasterKeyRequest::PremasterKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prekey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PremasterKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PremasterKeyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PremasterKeyRequestDefaultTypeInternal() {}
  union {
    PremasterKeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PremasterKeyRequestDefaultTypeInternal _PremasterKeyRequest_default_instance_;
PROTOBUF_CONSTEXPR RequestMsg::RequestMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.authcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.keyid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestMsgDefaultTypeInternal() {}
  union {
    RequestMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestMsgDefaultTypeInternal _RequestMsg_default_instance_;
PROTOBUF_CONSTEXPR RespondMsg::RespondMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.authcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.rv_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RespondMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RespondMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RespondMsgDefaultTypeInternal() {}
  union {
    RespondMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RespondMsgDefaultTypeInternal _RespondMsg_default_instance_;
}  // namespace Key
static ::_pb::Metadata file_level_metadata_transit_5fdata_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_transit_5fdata_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transit_5fdata_2eproto = nullptr;

const uint32_t TableStruct_transit_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Key::RandomNumRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Key::RandomNumRequest, _impl_.random_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Key::RandomKeyRespone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Key::RandomKeyRespone, _impl_.random_),
  PROTOBUF_FIELD_OFFSET(::Key::RandomKeyRespone, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Key::PremasterKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Key::PremasterKeyRequest, _impl_.prekey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Key::RequestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Key::RequestMsg, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::Key::RequestMsg, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::Key::RequestMsg, _impl_.authcode_),
  PROTOBUF_FIELD_OFFSET(::Key::RequestMsg, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::Key::RequestMsg, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::Key::RequestMsg, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::Key::RequestMsg, _impl_.keyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Key::RespondMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Key::RespondMsg, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::Key::RespondMsg, _impl_.rv_),
  PROTOBUF_FIELD_OFFSET(::Key::RespondMsg, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::Key::RespondMsg, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::Key::RespondMsg, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::Key::RespondMsg, _impl_.authcode_),
  PROTOBUF_FIELD_OFFSET(::Key::RespondMsg, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Key::RandomNumRequest)},
  { 7, -1, -1, sizeof(::Key::RandomKeyRespone)},
  { 15, -1, -1, sizeof(::Key::PremasterKeyRequest)},
  { 22, -1, -1, sizeof(::Key::RequestMsg)},
  { 35, -1, -1, sizeof(::Key::RespondMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Key::_RandomNumRequest_default_instance_._instance,
  &::Key::_RandomKeyRespone_default_instance_._instance,
  &::Key::_PremasterKeyRequest_default_instance_._instance,
  &::Key::_RequestMsg_default_instance_._instance,
  &::Key::_RespondMsg_default_instance_._instance,
};

const char descriptor_table_protodef_transit_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022transit_data.proto\022\003Key\"\"\n\020RandomNumRe"
  "quest\022\016\n\006random\030\001 \001(\014\"/\n\020RandomKeyRespon"
  "e\022\016\n\006random\030\001 \001(\014\022\013\n\003key\030\002 \001(\014\"%\n\023Premas"
  "terKeyRequest\022\016\n\006prekey\030\001 \001(\014\"\206\001\n\nReques"
  "tMsg\022\027\n\004type\030\001 \001(\0162\t.Key.TYPE\022\020\n\010clientI"
  "d\030\002 \001(\014\022\020\n\010authCode\030\003 \001(\014\022\020\n\010serverId\030\004 "
  "\001(\014\022\014\n\004sign\030\005 \001(\014\022\014\n\004data\030\006 \001(\014\022\r\n\005keyid"
  "\030\007 \001(\005\"\214\001\n\nRespondMsg\022\027\n\004type\030\001 \001(\0162\t.Ke"
  "y.TYPE\022\023\n\002rv\030\002 \001(\0162\007.Key.RV\022\020\n\010clientId\030"
  "\003 \001(\014\022\020\n\010serverId\030\004 \001(\014\022\014\n\004sign\030\005 \001(\014\022\020\n"
  "\010authCode\030\006 \001(\014\022\014\n\004data\030\007 \001(\014*>\n\004TYPE\022\r\n"
  "\tRANDOMNUM\020\000\022\n\n\006PREKEY\020\001\022\014\n\010KEYCHECK\020\002\022\r"
  "\n\tKEYREVOKE\020\003*-\n\002RV\022\013\n\007SUCCESS\020\000\022\013\n\007AUTH"
  "ERR\020\001\022\r\n\tSERVERERR\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_transit_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transit_5fdata_2eproto = {
    false, false, 548, descriptor_table_protodef_transit_5fdata_2eproto,
    "transit_data.proto",
    &descriptor_table_transit_5fdata_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_transit_5fdata_2eproto::offsets,
    file_level_metadata_transit_5fdata_2eproto, file_level_enum_descriptors_transit_5fdata_2eproto,
    file_level_service_descriptors_transit_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transit_5fdata_2eproto_getter() {
  return &descriptor_table_transit_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transit_5fdata_2eproto(&descriptor_table_transit_5fdata_2eproto);
namespace Key {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transit_5fdata_2eproto);
  return file_level_enum_descriptors_transit_5fdata_2eproto[0];
}
bool TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RV_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transit_5fdata_2eproto);
  return file_level_enum_descriptors_transit_5fdata_2eproto[1];
}
bool RV_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RandomNumRequest::_Internal {
 public:
};

RandomNumRequest::RandomNumRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Key.RandomNumRequest)
}
RandomNumRequest::RandomNumRequest(const RandomNumRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RandomNumRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.random_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.random_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.random_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_random().empty()) {
    _this->_impl_.random_.Set(from._internal_random(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Key.RandomNumRequest)
}

inline void RandomNumRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.random_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.random_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.random_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RandomNumRequest::~RandomNumRequest() {
  // @@protoc_insertion_point(destructor:Key.RandomNumRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RandomNumRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.random_.Destroy();
}

void RandomNumRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RandomNumRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Key.RandomNumRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.random_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RandomNumRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes random = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_random();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RandomNumRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Key.RandomNumRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes random = 1;
  if (!this->_internal_random().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_random(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Key.RandomNumRequest)
  return target;
}

size_t RandomNumRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Key.RandomNumRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes random = 1;
  if (!this->_internal_random().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_random());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RandomNumRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RandomNumRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RandomNumRequest::GetClassData() const { return &_class_data_; }


void RandomNumRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RandomNumRequest*>(&to_msg);
  auto& from = static_cast<const RandomNumRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Key.RandomNumRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_random().empty()) {
    _this->_internal_set_random(from._internal_random());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RandomNumRequest::CopyFrom(const RandomNumRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Key.RandomNumRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomNumRequest::IsInitialized() const {
  return true;
}

void RandomNumRequest::InternalSwap(RandomNumRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.random_, lhs_arena,
      &other->_impl_.random_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomNumRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transit_5fdata_2eproto_getter, &descriptor_table_transit_5fdata_2eproto_once,
      file_level_metadata_transit_5fdata_2eproto[0]);
}

// ===================================================================

class RandomKeyRespone::_Internal {
 public:
};

RandomKeyRespone::RandomKeyRespone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Key.RandomKeyRespone)
}
RandomKeyRespone::RandomKeyRespone(const RandomKeyRespone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RandomKeyRespone* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.random_){}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.random_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.random_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_random().empty()) {
    _this->_impl_.random_.Set(from._internal_random(), 
      _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Key.RandomKeyRespone)
}

inline void RandomKeyRespone::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.random_){}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.random_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.random_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RandomKeyRespone::~RandomKeyRespone() {
  // @@protoc_insertion_point(destructor:Key.RandomKeyRespone)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RandomKeyRespone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.random_.Destroy();
  _impl_.key_.Destroy();
}

void RandomKeyRespone::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RandomKeyRespone::Clear() {
// @@protoc_insertion_point(message_clear_start:Key.RandomKeyRespone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.random_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RandomKeyRespone::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes random = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_random();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RandomKeyRespone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Key.RandomKeyRespone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes random = 1;
  if (!this->_internal_random().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_random(), target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Key.RandomKeyRespone)
  return target;
}

size_t RandomKeyRespone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Key.RandomKeyRespone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes random = 1;
  if (!this->_internal_random().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_random());
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RandomKeyRespone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RandomKeyRespone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RandomKeyRespone::GetClassData() const { return &_class_data_; }


void RandomKeyRespone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RandomKeyRespone*>(&to_msg);
  auto& from = static_cast<const RandomKeyRespone&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Key.RandomKeyRespone)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_random().empty()) {
    _this->_internal_set_random(from._internal_random());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RandomKeyRespone::CopyFrom(const RandomKeyRespone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Key.RandomKeyRespone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomKeyRespone::IsInitialized() const {
  return true;
}

void RandomKeyRespone::InternalSwap(RandomKeyRespone* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.random_, lhs_arena,
      &other->_impl_.random_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RandomKeyRespone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transit_5fdata_2eproto_getter, &descriptor_table_transit_5fdata_2eproto_once,
      file_level_metadata_transit_5fdata_2eproto[1]);
}

// ===================================================================

class PremasterKeyRequest::_Internal {
 public:
};

PremasterKeyRequest::PremasterKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Key.PremasterKeyRequest)
}
PremasterKeyRequest::PremasterKeyRequest(const PremasterKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PremasterKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prekey_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prekey().empty()) {
    _this->_impl_.prekey_.Set(from._internal_prekey(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Key.PremasterKeyRequest)
}

inline void PremasterKeyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.prekey_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prekey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prekey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PremasterKeyRequest::~PremasterKeyRequest() {
  // @@protoc_insertion_point(destructor:Key.PremasterKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PremasterKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.prekey_.Destroy();
}

void PremasterKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PremasterKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Key.PremasterKeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prekey_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PremasterKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes prekey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_prekey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PremasterKeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Key.PremasterKeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes prekey = 1;
  if (!this->_internal_prekey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_prekey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Key.PremasterKeyRequest)
  return target;
}

size_t PremasterKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Key.PremasterKeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes prekey = 1;
  if (!this->_internal_prekey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prekey());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PremasterKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PremasterKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PremasterKeyRequest::GetClassData() const { return &_class_data_; }


void PremasterKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PremasterKeyRequest*>(&to_msg);
  auto& from = static_cast<const PremasterKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Key.PremasterKeyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_prekey().empty()) {
    _this->_internal_set_prekey(from._internal_prekey());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PremasterKeyRequest::CopyFrom(const PremasterKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Key.PremasterKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PremasterKeyRequest::IsInitialized() const {
  return true;
}

void PremasterKeyRequest::InternalSwap(PremasterKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prekey_, lhs_arena,
      &other->_impl_.prekey_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PremasterKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transit_5fdata_2eproto_getter, &descriptor_table_transit_5fdata_2eproto_once,
      file_level_metadata_transit_5fdata_2eproto[2]);
}

// ===================================================================

class RequestMsg::_Internal {
 public:
};

RequestMsg::RequestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Key.RequestMsg)
}
RequestMsg::RequestMsg(const RequestMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.authcode_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.keyid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.authcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authcode().empty()) {
    _this->_impl_.authcode_.Set(from._internal_authcode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serverid().empty()) {
    _this->_impl_.serverid_.Set(from._internal_serverid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.keyid_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.keyid_));
  // @@protoc_insertion_point(copy_constructor:Key.RequestMsg)
}

inline void RequestMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.authcode_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.keyid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.authcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestMsg::~RequestMsg() {
  // @@protoc_insertion_point(destructor:Key.RequestMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
  _impl_.authcode_.Destroy();
  _impl_.serverid_.Destroy();
  _impl_.sign_.Destroy();
  _impl_.data_.Destroy();
}

void RequestMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Key.RequestMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  _impl_.authcode_.ClearToEmpty();
  _impl_.serverid_.ClearToEmpty();
  _impl_.sign_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.keyid_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.keyid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Key.TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Key::TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes clientId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes authCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_authcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes serverId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_serverid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 keyid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.keyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Key.RequestMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Key.TYPE type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes clientId = 2;
  if (!this->_internal_clientid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_clientid(), target);
  }

  // bytes authCode = 3;
  if (!this->_internal_authcode().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_authcode(), target);
  }

  // bytes serverId = 4;
  if (!this->_internal_serverid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_serverid(), target);
  }

  // bytes sign = 5;
  if (!this->_internal_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sign(), target);
  }

  // bytes data = 6;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data(), target);
  }

  // int32 keyid = 7;
  if (this->_internal_keyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_keyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Key.RequestMsg)
  return target;
}

size_t RequestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Key.RequestMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes clientId = 2;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clientid());
  }

  // bytes authCode = 3;
  if (!this->_internal_authcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_authcode());
  }

  // bytes serverId = 4;
  if (!this->_internal_serverid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serverid());
  }

  // bytes sign = 5;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  // bytes data = 6;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .Key.TYPE type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 keyid = 7;
  if (this->_internal_keyid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_keyid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestMsg::GetClassData() const { return &_class_data_; }


void RequestMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestMsg*>(&to_msg);
  auto& from = static_cast<const RequestMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Key.RequestMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_authcode().empty()) {
    _this->_internal_set_authcode(from._internal_authcode());
  }
  if (!from._internal_serverid().empty()) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_keyid() != 0) {
    _this->_internal_set_keyid(from._internal_keyid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestMsg::CopyFrom(const RequestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Key.RequestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMsg::IsInitialized() const {
  return true;
}

void RequestMsg::InternalSwap(RequestMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.authcode_, lhs_arena,
      &other->_impl_.authcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverid_, lhs_arena,
      &other->_impl_.serverid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestMsg, _impl_.keyid_)
      + sizeof(RequestMsg::_impl_.keyid_)
      - PROTOBUF_FIELD_OFFSET(RequestMsg, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transit_5fdata_2eproto_getter, &descriptor_table_transit_5fdata_2eproto_once,
      file_level_metadata_transit_5fdata_2eproto[3]);
}

// ===================================================================

class RespondMsg::_Internal {
 public:
};

RespondMsg::RespondMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Key.RespondMsg)
}
RespondMsg::RespondMsg(const RespondMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RespondMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.authcode_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.rv_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serverid().empty()) {
    _this->_impl_.serverid_.Set(from._internal_serverid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  _impl_.authcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authcode().empty()) {
    _this->_impl_.authcode_.Set(from._internal_authcode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rv_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.rv_));
  // @@protoc_insertion_point(copy_constructor:Key.RespondMsg)
}

inline void RespondMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.authcode_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.rv_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.authcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RespondMsg::~RespondMsg() {
  // @@protoc_insertion_point(destructor:Key.RespondMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RespondMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientid_.Destroy();
  _impl_.serverid_.Destroy();
  _impl_.sign_.Destroy();
  _impl_.authcode_.Destroy();
  _impl_.data_.Destroy();
}

void RespondMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RespondMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Key.RespondMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_.ClearToEmpty();
  _impl_.serverid_.ClearToEmpty();
  _impl_.sign_.ClearToEmpty();
  _impl_.authcode_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rv_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.rv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespondMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Key.TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Key::TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .Key.RV rv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rv(static_cast<::Key::RV>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes clientId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes serverId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_serverid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes authCode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_authcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespondMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Key.RespondMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Key.TYPE type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .Key.RV rv = 2;
  if (this->_internal_rv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rv(), target);
  }

  // bytes clientId = 3;
  if (!this->_internal_clientid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_clientid(), target);
  }

  // bytes serverId = 4;
  if (!this->_internal_serverid().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_serverid(), target);
  }

  // bytes sign = 5;
  if (!this->_internal_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sign(), target);
  }

  // bytes authCode = 6;
  if (!this->_internal_authcode().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_authcode(), target);
  }

  // bytes data = 7;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Key.RespondMsg)
  return target;
}

size_t RespondMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Key.RespondMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes clientId = 3;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_clientid());
  }

  // bytes serverId = 4;
  if (!this->_internal_serverid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_serverid());
  }

  // bytes sign = 5;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  // bytes authCode = 6;
  if (!this->_internal_authcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_authcode());
  }

  // bytes data = 7;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .Key.TYPE type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .Key.RV rv = 2;
  if (this->_internal_rv() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespondMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RespondMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespondMsg::GetClassData() const { return &_class_data_; }


void RespondMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RespondMsg*>(&to_msg);
  auto& from = static_cast<const RespondMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Key.RespondMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  if (!from._internal_serverid().empty()) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (!from._internal_authcode().empty()) {
    _this->_internal_set_authcode(from._internal_authcode());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_rv() != 0) {
    _this->_internal_set_rv(from._internal_rv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespondMsg::CopyFrom(const RespondMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Key.RespondMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespondMsg::IsInitialized() const {
  return true;
}

void RespondMsg::InternalSwap(RespondMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverid_, lhs_arena,
      &other->_impl_.serverid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.authcode_, lhs_arena,
      &other->_impl_.authcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespondMsg, _impl_.rv_)
      + sizeof(RespondMsg::_impl_.rv_)
      - PROTOBUF_FIELD_OFFSET(RespondMsg, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespondMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transit_5fdata_2eproto_getter, &descriptor_table_transit_5fdata_2eproto_once,
      file_level_metadata_transit_5fdata_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Key
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Key::RandomNumRequest*
Arena::CreateMaybeMessage< ::Key::RandomNumRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Key::RandomNumRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Key::RandomKeyRespone*
Arena::CreateMaybeMessage< ::Key::RandomKeyRespone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Key::RandomKeyRespone >(arena);
}
template<> PROTOBUF_NOINLINE ::Key::PremasterKeyRequest*
Arena::CreateMaybeMessage< ::Key::PremasterKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Key::PremasterKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Key::RequestMsg*
Arena::CreateMaybeMessage< ::Key::RequestMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Key::RequestMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Key::RespondMsg*
Arena::CreateMaybeMessage< ::Key::RespondMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Key::RespondMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
